{"version":3,"file":"static/js/398.15b7b3e6.chunk.js","mappings":"4JAEe,SAASA,EAAKC,GAA0C,IAAzC,GAAEC,EAAE,GAAEC,EAAE,KAAEC,EAAI,YAAEC,EAAW,SAAEC,GAASL,EAGlE,OACIM,EAAAA,EAAAA,MAAA,WAASL,GAAIA,EAAIM,UAAU,kBACvBC,MAAO,CAAEC,WAAY,OAAOP,eAAiB,SAAUC,GAAOO,SAAA,EAE1DC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,gBACfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBG,SAAA,EACtCC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,aAAYG,SAAEL,IAC3BD,IAAeO,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,0CACzBK,wBAAyB,CAAEC,OAAQT,UAOrD,C,wBCdA,MAAMU,EAAMC,EAAaD,KAAO,CAAEE,IAC9B,GAAuB,YAAnBA,EAAQC,OACR,MAAMD,EACH,GAAuB,cAAnBA,EAAQC,OACf,OAAOD,EAAQE,MACZ,KAAuB,aAAnBF,EAAQC,OACTD,EAAQG,QAEdH,EAAQC,OAAS,UACjBD,EAAQI,MAAMC,IACVL,EAAQC,OAAS,YACjBD,EAAQE,MAAQG,CAAC,IACjBC,IACAN,EAAQC,OAAS,WACjBD,EAAQG,OAASG,CAAC,IAEhBN,EAEb,GACKO,EAAc,CAChBC,QAAQ,GA6eZC,EAAAA,GAAOC,eAAeC,EAAAA,GAAW,eAAgB,CAC7CT,MAAOU,EAAAA,KAgBP,MAAMC,GAASC,EAAAA,EAAAA,KA5fGC,CAACC,EAAMC,EAASC,KAClC,MAAM,MAAEC,EAAK,QAAEC,EAAO,SAAEC,EAAQ,aAAEC,EAAY,kBAAEC,EAAiB,kBAAEC,EAAiB,gBAAEC,EAAe,kBAAEC,EAAiB,mBAAEC,EAAkB,iBAAEC,GAAqBV,GAC5JW,EAAoBC,EAAUC,EAAOC,GAAWC,EAAAA,GAAeC,IAAIf,IAKnEgB,EAAKC,IAASC,EAAAA,EAAAA,IAAUrB,GAEzBsB,GAAoBC,EAAAA,EAAAA,SAAO,GAG3BC,GAAeD,EAAAA,EAAAA,SAAO,GAEtBE,GAASF,EAAAA,EAAAA,QAAOJ,GAChBO,GAAaH,EAAAA,EAAAA,QAAOtB,GACpB0B,GAAYJ,EAAAA,EAAAA,QAAOrB,GACnB0B,EAAYA,IAAID,EAAUE,QAC1BC,EAAWA,IAAIF,IAAYG,aAAeH,IAAYI,YACrDC,EAAUC,EAAUC,EAAgBC,IAAmBC,EAAAA,EAAAA,IAAkBlC,EAAOgB,GACjFmB,GAAoBf,EAAAA,EAAAA,QAAO,CAAC,GAAGM,QAC/BU,GAAWC,EAAAA,EAAAA,IAAYlC,GAAgBJ,EAAOqC,SAASpB,GAAOb,EAC9DmC,EAAUA,CAACC,EAAMb,KACnB,IAAI,MAAMc,KAAKL,EAAkB,CAC7B,MAAMM,EAAID,EACV,GAAU,SAANC,GACA,IAAKxC,EAAQsC,EAAKE,GAAIf,EAAQe,IAAK,CAC/B,KAAKJ,EAAAA,EAAAA,IAAYE,EAAKE,IAClB,OAAO,EAEX,IAAKxC,EAAQyC,EAAchB,EAAQe,IAC/B,OAAO,CAEf,OAEA,GAAIf,EAAQe,KAAOF,EAAKE,GACpB,OAAO,CAGnB,CACA,OAAO,CAAI,EAETE,GAAcC,EAAAA,EAAAA,UAAQ,KACxB,MAAMC,IACG7B,KACAlB,KAEAuC,EAAAA,EAAAA,IAAYjC,IAEbqB,IAAYqB,aACZ5C,OACCmC,EAAAA,EAAAA,IAAYhC,IAA2BA,GAJAD,GAQ1C2C,EAAoBC,IAEtB,MAAMC,GAAWC,EAAAA,EAAAA,IAAaF,GAE9B,cADOC,EAASE,GACXN,EAGE,CACHO,cAAc,EACdC,WAAW,KACRJ,GALIA,CAMV,EAECK,EAAaxB,IACbyB,EAActB,IACduB,EAAiBT,EAAiBO,GAClCG,EAAiBH,IAAeC,EAAcC,EAAiBT,EAAiBQ,GAItF,IAAIG,EAAoBF,EACxB,MAAO,CACH,KACI,MAAMG,EAAcZ,EAAiBjB,KAErC,OADsBQ,EAAQqB,EAAaD,IAYvCA,EAAkBE,KAAOD,EAAYC,KACrCF,EAAkBL,UAAYM,EAAYN,UAC1CK,EAAkBN,aAAeO,EAAYP,aAC7CM,EAAkBG,MAAQF,EAAYE,MAC/BH,IAEPA,EAAoBC,EACbA,EACX,EAEJ,IAAIF,EACP,GAEF,CACCzD,EACAgB,IAGE8C,GAASC,EAAAA,EAAAA,uBAAqBC,EAAAA,EAAAA,cAAaC,GAAWjC,EAAehB,GAAK,CAACU,EAASa,KAC7ED,EAAQC,EAAMb,IAAUuC,GAAU,KAE/C,CACIjE,EACAgB,IACA2B,EAAY,GAAIA,EAAY,IAC1BuB,GAAkB/C,EAAkBO,QACpCyC,EAAiBzD,EAAmBM,IAAQN,EAAmBM,GAAKoD,OAAS,EAC7Ed,EAAaQ,EAAOF,KACpBA,GAAOvB,EAAAA,EAAAA,IAAYiB,GAAclB,EAAWkB,EAC5CO,EAAQC,EAAOD,MAEfQ,GAAejD,EAAAA,EAAAA,QAAOwC,GACtBlB,EAAejC,GAAmB4B,EAAAA,EAAAA,IAAYiB,GAAce,EAAa3C,QAAU4B,EAAaM,EAIhGU,IAEEH,KAAmB9B,EAAAA,EAAAA,IAAYwB,MAE/BK,KAAmB7B,EAAAA,EAAAA,IAAYjC,GAA2BA,GAE1DqB,IAAYqB,aAIZ5C,IAAiBmC,EAAAA,EAAAA,IAAYuB,IAAgBvD,GAG1CgC,EAAAA,EAAAA,IAAYuB,IAASvD,IAI1BkE,KAA4BvD,GAAOlB,GAAWoE,GAAkBI,GAChElB,GAAef,EAAAA,EAAAA,IAAYyB,EAAOV,cAAgBmB,EAAyBT,EAAOV,aAClFC,GAAYhB,EAAAA,EAAAA,IAAYyB,EAAOT,WAAakB,EAAyBT,EAAOT,UAG5EmB,GAAaR,EAAAA,EAAAA,cAAYS,UAC3B,MAAMC,EAAiBnD,EAAWG,QAClC,IAAKV,IAAQ0D,GAAkBrD,EAAaK,SAAWD,IAAYqB,WAC/D,OAAO,EAEX,IAAI6B,EACAC,EACAC,GAAU,EACd,MAAMC,EAAOC,GAAkB,CAAC,EAG1BC,GAAyBpE,EAAMI,KAAS8D,EAAKzF,OAW5C4F,EAAoBA,IACnBC,EAAAA,IACQ7D,EAAaK,SAAWV,IAAQM,EAAOI,SAAWP,EAAkBO,QAEzEV,IAAQM,EAAOI,QAGpByD,EAAa,CACf/B,cAAc,EACdC,WAAW,GAET+B,EAA8BA,KAChCrD,EAASoD,EAAW,EAElBE,EAAeA,KAEjB,MAAMC,EAAc1E,EAAMI,GACtBsE,GAAeA,EAAY,KAAOV,UAC3BhE,EAAMI,EACjB,EAGEuE,EAAe,CACjBnC,cAAc,IAIdf,EAAAA,EAAAA,IAAYP,IAAW8B,QACvB2B,EAAalC,WAAY,GAE7B,IAgCI,GA/BI2B,IACAjD,EAASwD,GAGLxF,EAAOyF,iBAAkBnD,EAAAA,EAAAA,IAAYP,IAAW8B,OAChD6B,YAAW,KACHZ,GAAWI,KACXxD,IAAYiE,cAAc1E,EAAKjB,EACnC,GACDA,EAAOyF,gBAId5E,EAAMI,GAAO,CACT0D,EAAezD,IACf0E,EAAAA,EAAAA,SAGPhB,EAASC,GAAWhE,EAAMI,GAC3B2D,QAAgBA,EACZK,GAGAS,WAAWJ,EAActF,EAAO6F,mBAQ/BhF,EAAMI,IAAQJ,EAAMI,GAAK,KAAO4D,EAMjC,OALII,GACIC,KACAxD,IAAYoE,YAAY7E,IAGzB,EAGXmE,EAAWtB,MAAQiC,EAAAA,GAanB,MAAMC,EAAepF,EAASK,GAC9B,KAAKqB,EAAAA,EAAAA,IAAY0D,KAChBnB,GAAWmB,EAAa,IACzBnB,GAAWmB,EAAa,IACJ,IAApBA,EAAa,IAOT,OANAX,IACIJ,GACIC,KACAxD,IAAYoE,YAAY7E,IAGzB,EAIX,MAAMgF,EAAYlE,IAAW8B,KAG7BuB,EAAWvB,KAAO3D,EAAQ+F,EAAWrB,GAAWqB,EAAYrB,EAExDK,GACIC,KACAxD,IAAYwE,UAAUtB,EAAS3D,EAAKjB,EAGhD,CAAE,MAAOmG,GACLb,IACA,MAAMc,EAAgB1E,KAChB,mBAAE2E,GAAuBD,EAE1BA,EAAcrD,aAEfqC,EAAWtB,MAAQqC,EAGflB,GAAyBC,MACzBkB,EAAcE,QAAQH,EAAKlF,EAAKmF,KACL,IAAvBC,IAA+BE,EAAAA,EAAAA,IAAWF,IAAuBA,EAAmBF,MAC/EzE,IAAY8E,mBAAsB9E,IAAY+E,wBAAyB7E,KAIxEwE,EAAcM,aAAaP,EAAKlF,EAAKmF,GAAgBO,IACjD,MAAMC,EAAejG,EAAmBM,GACpC2F,GAAgBA,EAAa,IAC7BA,EAAa,GAAGC,EAAAA,GAAiBC,uBAAwBH,EAC7D,GACD,CACCI,YAAahC,EAAKgC,YAAc,GAAK,EACrCzH,QAAQ,MAMhC,CAKA,OAHAwF,GAAU,EAEVO,KACO,CAAI,GAYf,CACIpE,EACAhB,IAIE+G,GAAc/C,EAAAA,EAAAA,cACpB,WAAW,QAAAgD,EAAAC,UAAA7C,OAAP8C,EAAI,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJF,EAAIE,GAAAH,UAAAG,GACJ,OAAOC,EAAAA,EAAAA,IAAerH,EAAOsB,EAAOI,WAAYwF,EACpD,GACA,IA2GA,IAzGAI,EAAAA,EAAAA,KAA0B,KACtB/F,EAAWG,QAAU5B,EACrB0B,EAAUE,QAAU3B,GAGfsC,EAAAA,EAAAA,IAAYiB,KACbe,EAAa3C,QAAU4B,EAC3B,KAGJgE,EAAAA,EAAAA,KAA0B,KACtB,IAAKtG,EAAK,OACV,MAAMuG,EAAiB/C,EAAWgD,KAAK1B,EAAAA,GAAW1G,GAGlD,IAAIqI,EAAyB,EAC7B,MAkBMC,GAAcC,EAAAA,EAAAA,IAAkB3G,EAAKN,GAlBtB,SAACkH,GAAkB,IAAZ9C,EAAImC,UAAA7C,OAAA,QAAAyD,IAAAZ,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChC,GAAIW,GAAQhB,EAAAA,GAAiBkB,YAAa,CACtC,MAAMC,EAAMC,KAAKD,MACbtG,IAAY8E,mBAAqBwB,EAAMN,GAA0B9F,MACjE8F,EAAyBM,EAAMtG,IAAYwG,sBAC3CV,IAER,MAAO,GAAIK,GAAQhB,EAAAA,GAAiBsB,gBAC5BzG,IAAY+E,uBAAyB7E,KACrC4F,QAED,IAAIK,GAAQhB,EAAAA,GAAiBuB,aAChC,OAAO3D,IACJ,GAAIoD,GAAQhB,EAAAA,GAAiBC,uBAChC,OAAOrC,EAAWM,EACtB,CAEJ,IAqBA,OAlBAzD,EAAaK,SAAU,EACvBJ,EAAOI,QAAUV,EACjBG,EAAkBO,SAAU,EAE5BK,EAAS,CACLoB,GAAIlC,IAGJqD,KACIjC,EAAAA,EAAAA,IAAYuB,IAASwE,EAAAA,GAErBb,KAIAc,EAAAA,EAAAA,IAAId,IAGL,KAEHlG,EAAaK,SAAU,EACvBgG,GAAa,CAChB,GACF,CACC1G,KAGJsG,EAAAA,EAAAA,KAA0B,KACtB,IAAIgB,EACJ,SAASC,IAGL,MAAMC,GAAWlC,EAAAA,EAAAA,IAAWhG,GAAmBA,EAAgBwB,IAAW8B,MAAQtD,EAI9EkI,IAAuB,IAAXF,IACZA,EAAQ7C,WAAWgD,EAASD,GAEpC,CACA,SAASC,IAGA3G,IAAW+B,QAAUtD,IAAqBkB,IAAYG,cAAiBpB,IAAsBiB,IAAYI,WAI1G0G,IAHA/D,EAAWpF,GAAaH,KAAKsJ,EAKrC,CAEA,OADAA,IACO,KACCD,IACAI,aAAaJ,GACbA,GAAS,EACb,CACH,GACF,CACChI,EACAC,EACAC,EACAQ,KAGJ2H,EAAAA,EAAAA,eAAcjG,GAKVxC,IAAYmC,EAAAA,EAAAA,IAAYuB,IAAS5C,EAAK,CAItC,IAAKkE,EAAAA,IAAmBkD,EAAAA,GACpB,MAAM,IAAIQ,MAAM,yDAGpBrH,EAAWG,QAAU5B,EACrB0B,EAAUE,QAAU3B,EACpBsB,EAAaK,SAAU,EACvB,MAAMmH,EAAMhI,EAAQG,GACpB,KAAKqB,EAAAA,EAAAA,IAAYwG,GAAM,CACnB,MAAMhK,EAAUkI,EAAY8B,GAC5BlK,EAAIE,EACR,CACA,KAAIwD,EAAAA,EAAAA,IAAYwB,GAQZ,MAAMA,EARc,CACpB,MAAMhF,EAAU2F,EAAWpF,IACtBiD,EAAAA,EAAAA,IAAYK,KACb7D,EAAQC,OAAS,YACjBD,EAAQE,OAAQ,GAEpBJ,EAAIE,EACR,CAGJ,CACA,MAAO,CACHiK,OAAQ/B,EACR,QAAInD,GAEA,OADAzB,EAAkByB,MAAO,EAClBlB,CACX,EACA,SAAImB,GAEA,OADA1B,EAAkB0B,OAAQ,EACnBA,CACX,EACA,gBAAIT,GAEA,OADAjB,EAAkBiB,cAAe,EAC1BA,CACX,EACA,aAAIC,GAEA,OADAlB,EAAkBkB,WAAY,EACvBA,CACX,EACH,IA4BC0F,GAAkBC,EAAAA,EAAAA,IAAetJ,GAPpBuJ,GAAa,CAACjI,EAAKlB,EAASC,KAEvCA,EAAOwG,mBAAoB,EAC3BxG,EAAOM,mBAAoB,EAC3BN,EAAOyG,uBAAwB,EACxByC,EAAWjI,EAAKlB,EAASC,M,kCCvgBxC,MACA,EAAe,IAA0B,0ECDzC,MACA,EAAe,IAA0B,2E,cCtB1B,SAASmJ,EAAUrL,GAA4C,IAA3C,WAAEsL,EAAU,aAAEC,EAAY,WAAEC,GAAYxL,EACzE,MAAM,MAAEyL,EAAK,WAAEC,EAAU,iBAAEC,GCDd,SAAuBL,EAAYC,EAAcC,GAAa,IAADI,EACxE,MAAOH,EAAOI,IAAYC,EAAAA,EAAAA,UAASR,EAAa,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,MAAOA,GACvEhC,MAAMgC,GAAYS,KAAK,MAAMC,KAAI,CAACrH,EAAGsH,IAAMA,EAAI,MAC5CC,EAAcC,IAAmBC,EAAAA,EAAAA,MAClCV,EAAaW,SAAiC,QAAzBT,EAACM,EAAahJ,IAAI,eAAO,IAAA0I,EAAAA,EAAI,IAElD,gBAAEU,IAAoBC,EAAAA,EAAAA,YAAWC,EAAAA,GAoCvC,MAAO,CAAEf,QAAOC,aAAYC,iBAjCFc,IAClBA,EAAOnB,GAAcmB,GAAQ,GAAc,QAATA,IAElCH,EAAgBzI,QAEhByI,EAAgBzI,QAAQ6I,SAAS,EAAGnB,EAAc,KAIvCoB,SAASC,cAAcpB,GAE/BqB,eAAe,CAAEC,SAAU,WAGlClF,YAAW,KACH0D,EAAa,GAETO,EADAY,GAAQ,GAAKA,EAAO,EAAInB,EACf,CAAC,EAAG,MAAOmB,EAAO,EAAGA,EAAMA,EAAO,EAAG,MAAOnB,GAC9CmB,EAAO,GAAKnB,EACV,CAAC,EAAG,MAAOA,EAAa,EAAGA,EAAa,EAAGA,EAAa,EAAGA,EAAa,EAAGA,GAE3E,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,MAAOA,IAMxCY,EAAaa,IAAI,OAAQN,GACzBN,EAAgBD,EAAa,GAC9B,KAAI,EAKf,CD1CkDc,CAC9C1B,EACAC,EACAC,GAGF,OACE7K,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,aAAYG,UACzBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BG,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,OAAO0M,QAASA,IAAMtB,EAAiBD,EAAa,GAAGhL,UACpEC,EAAAA,EAAAA,KAAA,OAAKuM,IAAKC,EAAWC,IAAI,YAE3BzM,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,mCAAkCG,SAC7C+K,EAAMO,KAAI,CAACqB,EAAIpB,KACdtL,EAAAA,EAAAA,KAAA,MACEH,MAAO,CAAE8M,cAAsB,QAAPD,EAAe,MAAQ,QAC/C9M,UACEmL,GAAc2B,GAAa,QAAPA,EAAe,SAAW,WAEhDJ,QAASA,IAAMtB,EAAiB0B,GAAI3M,SAGnC2M,GAFIpB,QAMXtL,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,OAAO0M,QAASA,IAAMtB,EAAiBD,EAAa,GAAGhL,UACpEC,EAAAA,EAAAA,KAAA,OAAKuM,IAAKK,EAAYH,IAAI,eAKpC,CElCO,MAAMI,EAAW,CACpB,iCAAS,qBACT,uCAAU,QACV,+DAAc,gBACd,iCAAS,QACT,6CAAW,gBACX,6CAAW,gBACX,gEAAe,eACf,oGAAqB,uB,2CCNV,SAASC,EAASzN,GAAW,IAAV,MAAC0N,GAAM1N,EACvC,MAAM2N,GAAWC,EAAAA,EAAAA,MACjB,OACEtN,EAAAA,EAAAA,MAACuN,EAAAA,EAAgB,CAAoBtN,UAAU,uBAAsBG,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,UAASG,SAAC,sBACxBC,EAAAA,EAAAA,KAACmN,EAAAA,EAAU,CAACb,QAASA,IAAMU,EAAc,OAALD,QAAK,IAALA,EAAAA,EAAS,KAAKhN,SAAC,cAF9B,aAK3B,C,cCVe,SAASqN,EAAeC,GAErC,OACIrN,EAAAA,EAAAA,KAAA,OAAKsN,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAW1N,UAClFC,EAAAA,EAAAA,KAAA,QAAM0N,EAAE,gpBAAgpBtC,KAAMiC,EAAMM,OAAS,QAAU,aAG7rB,CCNe,SAASC,EAAUvO,GAAU,IAAT,GAAEqN,GAAIrN,EACrC,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,wBAAuBG,SAAE2M,EAAGmB,QAC5C7N,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,yBAAwBG,SAAC,oFACzCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCG,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,0BAAyBG,SACnC4I,MAAM,GAAGyC,KAAK,MAAMC,KAAI,CAACyC,EAAMxC,KACrBtL,EAAAA,EAAAA,KAACoN,EAAc,CAASO,OAAQrC,EAAE,GAAKoB,EAAGqB,QAArBzC,QAGpCtL,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,yBAAwBG,SACnC2M,EAAGsB,UAIXtB,EAAGuB,QAAQ5C,KAAI,CAACqB,EAAIpB,KACVtL,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,yBAAwBG,SACvC2M,GAD6CpB,KAKlDoB,EAAGwB,QAASlO,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,eAAeC,MAAO,CAACC,WAAY,OAAO4M,EAAGwB,aAE5ElO,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,0BAAyBG,SACpC2M,EAAGyB,YAIpB,CC1Be,SAASC,EAAW/O,GAA4C,IAA3C,KAAE+F,EAAI,UAAEP,EAAS,aAAE0G,EAAY,MAAElG,GAAOhG,EACxE,MAAMgP,EAAYjJ,GAAQA,EAAKkJ,OAAO5B,IAAsB,IAAfA,EAAG6B,UAEhD,OACIvO,EAAAA,EAAAA,KAACwO,EAAAA,EAAe,CAACC,KAAK,OAAM1O,SACvBsF,GACGrF,EAAAA,EAAAA,KAAC0O,EAAAA,EAAU,CAACC,QAAStJ,EAAMsJ,WAC1B9J,GAAaO,EACbiJ,GAOGrO,EAAAA,EAAAA,KAAC8M,EAAS,KANV9M,EAAAA,EAAAA,KAACkN,EAAAA,EAAgB,CAAoBtN,UAAU,iBAAgBG,SAC1DqF,EAAKiG,KAAI,CAACqB,EAAIpB,KACJtL,EAAAA,EAAAA,KAAC4N,EAAU,CAASlB,GAAIA,GAAPpB,MAFTC,IAU3BvL,EAAAA,EAAAA,KAAC4O,EAAAA,EAAW,KAI5B,CC1Be,SAASC,EAAaxP,GAAoB,IAAnB,aAAEyP,GAAczP,EAClD,MAAM0P,GAAY3K,EAAAA,EAAAA,UAAQ,KAAO0K,EAAaE,QAAO,CAACjL,EAAMkL,IAAiBlL,EAAOkL,GAAO,GAAKH,EAAalJ,QAAQsJ,QAAQ,IAAI,IAG3HC,GAAW/K,EAAAA,EAAAA,UAAQ,KAErB,IAAIgL,EAAW,CACX,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GAGP,OADAN,EAAaO,SAAQtB,GAAUqB,EAASrB,OACjCqB,CAAQ,GAChB,IAGH,OACIzP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oDAAmDG,SAAA,EAC9DJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACIJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBG,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,kCAAiCG,SAC1CgP,KAELpP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,YAAWG,SACrB4I,MAAM,GAAGyC,KAAK,MAAMC,KAAI,CAACyC,EAAMxC,KACrBtL,EAAAA,EAAAA,KAACoN,EAAc,CAASO,QAAQ,GAAXrC,QAGpCtL,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,+BAA+BC,MAAO,CAAEyP,SAAU,WAAW,IAAOP,EAAY,EAAK,aAAchP,SAE7G4I,MAAM,GAAGyC,KAAK,MAAMC,KAAI,CAACyC,EAAMxC,KACrBtL,EAAAA,EAAAA,KAACoN,EAAc,CAASO,QAAQ,GAAXrC,cAK5C3L,EAAAA,EAAAA,MAAA,QAAMC,UAAU,yBAAwBG,SAAA,CAAC,qDAC1B+O,EAAalJ,OAAO,qDAGvC5F,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,kBAAiBG,SAC3BwP,OAAOC,OAAOL,GAAUM,UAAUpE,KAAI,CAACqB,EAAIpB,KACjC3L,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mEAAkEG,SAAA,CACnF2P,KAAKC,IAAI,EAAErE,GAAG,KAACtL,EAAAA,EAAAA,KAACoN,EAAc,CAACO,QAAQ,IAAS,IAAE,IAAIjB,OADmCpB,SAOlH,CC5Ce,SAASsE,IAAW,IAAD3E,EAE9B,MAAOM,IAAgBE,EAAAA,EAAAA,MAEjBK,EAAOJ,SAAiC,QAAzBT,EAACM,EAAahJ,IAAI,eAAO,IAAA0I,EAAAA,EAAI,IAE5C,KAAE7F,EAAI,MAAEC,EAAK,UAAER,EAAS,OAAEyF,GAAWC,EAAgB,CACvD,UACAuB,EACA,MAGI1G,KAAM0J,GAAiBvE,EAAgB,CAAC,iBAAkBsF,EAAAA,KAC5D,aAAEC,GNXG,SAAmBC,GAAc,IAADC,EAC7C,MAAOzE,EAAcC,IAAmBC,EAAAA,EAAAA,MAClCwE,EAAkD,QAAnCD,EAAGzE,EAAa2E,OAAOH,UAAY,IAAAC,EAAAA,EAAI,GAEtDG,EAAc,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,YAsFjF,MAAO,CACLC,mBAhFF,SAA4BC,GAC1B,MAAMC,EAAkB,IAAIC,gBAAgBhF,GAE5C,GAAI4E,EAAYK,SAAST,GAGvB,OAFAO,EAAgBlE,IAAI2D,EAAaM,QACjC7E,EAAgB8E,GAIlB,MAAMd,EAASc,EAAgBJ,OAAOH,GAEtC,GAAIP,EAAOgB,SAASH,GAAc,CAChC,MAAMI,EAAYjB,EAAOkB,QAAQnQ,GAAUA,IAAU8P,IACrDC,EAAgBK,OAAOZ,GACvBU,EAAUpB,SAAS9O,GAAU+P,EAAgBM,OAAOb,EAAaxP,IACnE,MACE+P,EAAgBM,OAAOb,EAAaM,GAEtC7E,EAAgB8E,EAClB,EA8DER,aA5DF,SAAsBxF,GACpB,MAAMuG,EAAU,CAAC,EACXC,EAAe,GACfC,EAAiB,GAEvB,IAAIC,EAAW,KAAMC,EAAW,KAC5BC,EAAW,KAAMC,EAAW,KAC5BC,EAAW,KAAMC,EAAW,KAEhC,IAAK,MAAO7O,EAAKjC,KAAUgL,EAAa+F,UAC1B,SAAR9O,IACU,aAARA,EAAoBwO,EAAWO,WAAWhR,IAAU,EACvC,aAARiC,EAAoByO,EAAWM,WAAWhR,IAAU,KAC5C,aAARiC,EAAoB0O,EAAWK,WAAWhR,IAAU,EAC5C,aAARiC,EAAoB2O,EAAWI,WAAWhR,IAAU,IAC5C,aAARiC,EAAoB4O,EAAWG,WAAWhR,IAAU,EAC5C,aAARiC,EAAoB6O,EAAWE,WAAWhR,IAAU,IAC5C,gBAARiC,EAAuBsO,EAAaU,KAAKjR,GACjC,WAARiC,EAAkBuO,EAAeS,KAAK3E,EAAStM,IACnDsQ,EAAQrO,GAAOqO,EAAQrO,GAAO,IAAIqO,EAAQrO,GAAMjC,GAAS,CAACA,IAInE+J,GAAQlF,GACCA,EAAKiG,KAAKqB,IACf,MAAM+E,EAAalC,OAAO+B,QAAQT,GAASvC,OAAMjP,IAAA,IAAEmD,EAAKgN,GAAOnQ,EAAA,OAC7DmQ,EAAOgB,SAAS9D,EAAGlK,GAAK,IAEpBkP,EAAmBZ,EAAaxC,OACnCqD,IAAsB,IAAbjF,EAAGiF,KAETC,IACHX,GAAWvE,EAAGmF,OAASZ,MACvBD,GAAWtE,EAAGmF,OAASb,GACpBc,IACHX,GAAWzE,EAAGa,OAAS4D,MACvBD,GAAWxE,EAAGa,OAAS2D,GACpBa,IACHV,GAAW3E,EAAGsF,OAASX,MACvBD,GAAW1E,EAAGsF,OAASZ,GACpBa,EACsB,IAA1BlB,EAAenL,QACf8G,EAAGwF,OAAOC,MAAMC,GAAUrB,EAAeP,SAAS4B,KAEpD,MAAO,IACF1F,EACH6B,QACEkD,GACAC,GACAE,GACAE,GACAC,GACAE,EACH,MAEF,EACL,EAKEI,YAvFF,SAAqBhC,GACnB9E,EAAaoF,OAAON,GACpB7E,EAAgBD,EAClB,EAqFE0E,kBAEJ,CMrF6BqC,GAQzB,OANAC,EAAAA,EAAAA,YAAU,KACDnN,GACL0K,EAAaxF,EAAO,GACrB,CAACiB,EAAc1G,KAId7E,EAAAA,EAAAA,KAAA,WAASV,GAAG,UAASS,UACjBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWG,SAAA,EACtBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wDAAuDG,SAAA,EAClEC,EAAAA,EAAAA,KAACwS,EAAAA,GAAI,CAAC5S,UAAU,YAAY6S,GAAI,IAAI1S,SAAC,gDAGrCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,OACNC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4CAET+O,IAAgB9O,EAAAA,EAAAA,KAAC6O,EAAa,CAACC,aAAcA,KAC9C9O,EAAAA,EAAAA,KAAC0S,EAAc,CACXrN,MAAOA,EACPR,UAAWA,EACX0G,aAAcA,EACdnG,KAAMA,IAET0J,IACG9O,EAAAA,EAAAA,KAAC0K,EAAU,CACPE,aAAc,IACdD,WAAY+E,KAAKiD,MAAM7D,EAAalJ,OAAS,GAAK,IAClDiF,WAAY,iBAMpC,CCxCA,QAhBA,WACE,OACElL,EAAAA,EAAAA,MAAAiT,EAAAA,SAAA,CAAA7S,SAAA,EACEC,EAAAA,EAAAA,KAACZ,EAAK,CACJG,GAAIA,EACJD,GAAG,gBACHE,KAAM,MAEJE,SAAS,uCACTD,YAAY,8NAGnBO,EAAAA,EAAAA,KAAC4P,EAAO,MAGX,C","sources":["components/sections/Intro/Intro.js","../node_modules/swr/dist/immutable/index.mjs","assets/icons/pagination-arrow-left.svg","assets/icons/pagination-arrow-right.svg","components/ui/Pagination/Pagination.js","hooks/usePagination.js","hooks/useFilter.js","components/ui/messages/NoResults.js","components/sections/Reviews/ReviewStarIcon.js","components/sections/Reviews/ReviewItem.js","components/sections/Reviews/ReviewsDisplay.js","components/sections/Reviews/ReviewsHeader.js","components/sections/Reviews/Reviews.js","pages/ReviewsPage/ReviewsSections.js"],"sourcesContent":["import React from 'react'\nimport './intro.css'\nexport default function Intro({ id, bg, posY, description, headline}) {\n\n    \n  return (\n      <section id={id} className='intro center-gr'\n          style={{ background: `url(${bg}) no-repeat`, '--posY': posY }}\n      >\n              <div className='mask-layer'></div>\n              <div className='container text-center'>\n              <h2 className='text-light'>{headline}</h2>\n              {description && <p className='text-light small-text text-main up-case'\n                  dangerouslySetInnerHTML={{ __html: description }}\n                  ></p>\n                  } \n              </div>\n   \n      </section>\n  )\n}\n","import 'client-only';\nimport ReactExports, { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT, SWRConfig, defaultConfig, withArgs, SWRGlobalState, serialize, createCacheHelper, isUndefined, getTimestamp, UNDEFINED, isFunction, revalidateEvents, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects, withMiddleware } from 'swr/_internal';\n\n/// <reference types=\"react/experimental\" />\nconst use = ReactExports.use || ((promise)=>{\n    if (promise.status === 'pending') {\n        throw promise;\n    } else if (promise.status === 'fulfilled') {\n        return promise.value;\n    } else if (promise.status === 'rejected') {\n        throw promise.reason;\n    } else {\n        promise.status = 'pending';\n        promise.then((v)=>{\n            promise.status = 'fulfilled';\n            promise.value = v;\n        }, (e)=>{\n            promise.status = 'rejected';\n            promise.reason = e;\n        });\n        throw promise;\n    }\n});\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    const { cache, compare, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = serialize(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = useRef(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = useRef(false);\n    // Refs to keep the key and config.\n    const keyRef = useRef(key);\n    const fetcherRef = useRef(fetcher);\n    const configRef = useRef(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache, key);\n    const stateDependencies = useRef({}).current;\n    const fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        for(const _ in stateDependencies){\n            const t = _;\n            if (t === 'data') {\n                if (!compare(prev[t], current[t])) {\n                    if (!isUndefined(prev[t])) {\n                        return false;\n                    }\n                    if (!compare(returnedData, current[t])) {\n                        return false;\n                    }\n                }\n            } else {\n                if (current[t] !== prev[t]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const getSnapshot = useMemo(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!isUndefined(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            if (!isUndefined(revalidateIfStale)) return revalidateIfStale;\n            return true;\n        })();\n        // Get the cache and merge it with expected states.\n        const getSelectedCache = (state)=>{\n            // We only select the needed fields from the state.\n            const snapshot = mergeObjects(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        const cachedData = getCache();\n        const initialData = getInitialCache();\n        const clientSnapshot = getSelectedCache(cachedData);\n        const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n        // To make sure that we are returning the same object reference to avoid\n        // unnecessary re-renders, we keep the previous snapshot and use deep\n        // comparison to check if we need to return a new one.\n        let memorizedSnapshot = clientSnapshot;\n        return [\n            ()=>{\n                const newSnapshot = getSelectedCache(getCache());\n                const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n                if (compareResult) {\n                    // Mentally, we should always return the `memorizedSnapshot` here\n                    // as there's no change between the new and old snapshots.\n                    // However, since the `isEqual` function only compares selected fields,\n                    // the values of the unselected fields might be changed. That's\n                    // simply because we didn't track them.\n                    // To support the case in https://github.com/vercel/swr/pull/2576,\n                    // we need to update these fields in the `memorizedSnapshot` too\n                    // with direct mutations to ensure the snapshot is always up-to-date\n                    // even for the unselected fields, but only trigger re-renders when\n                    // the selected fields are changed.\n                    memorizedSnapshot.data = newSnapshot.data;\n                    memorizedSnapshot.isLoading = newSnapshot.isLoading;\n                    memorizedSnapshot.isValidating = newSnapshot.isValidating;\n                    memorizedSnapshot.error = newSnapshot.error;\n                    return memorizedSnapshot;\n                } else {\n                    memorizedSnapshot = newSnapshot;\n                    return newSnapshot;\n                }\n            },\n            ()=>serverSnapshot\n        ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = useSyncExternalStore(useCallback((callback)=>subscribeCache(key, (current, prev)=>{\n            if (!isEqual(prev, current)) callback();\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        cache,\n        key\n    ]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = isUndefined(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = useRef(data);\n    const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // if a key already has revalidators and also has error, we should not trigger revalidation\n        if (hasRevalidator && !isUndefined(error)) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return isUndefined(data) ? false : revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return isUndefined(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = useCallback(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if (isUndefined(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && isUndefined(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    getTimestamp()\n                ];\n            }\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!isUndefined(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, (_opts)=>{\n                                const revalidators = EVENT_REVALIDATORS[key];\n                                if (revalidators && revalidators[0]) {\n                                    revalidators[0](revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                                }\n                            }, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    const boundMutate = useCallback(// Use callback to make sure `keyRef.current` returns latest result every time\n    (...args)=>{\n        return internalMutate(cache, keyRef.current, ...args);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    useIsomorphicLayoutEffect(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!isUndefined(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    useIsomorphicLayoutEffect(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        let nextFocusRevalidatedAt = 0;\n        const onRevalidate = (type, opts = {})=>{\n            if (type == revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            } else if (type == revalidateEvents.ERROR_REVALIDATE_EVENT) {\n                return revalidate(opts);\n            }\n            return;\n        };\n        const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation\n        if (shouldDoInitialRevalidation) {\n            if (isUndefined(data) || IS_SERVER) {\n                // Revalidate immediately.\n                softRevalidate();\n            } else {\n                // Delay the revalidate if we have data to return so we won't block\n                // rendering.\n                rAF(softRevalidate);\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    useIsomorphicLayoutEffect(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    useDebugValue(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && isUndefined(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any initial data. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!IS_REACT_LEGACY && IS_SERVER) {\n            throw new Error('Fallback data is required when using suspense in SSR.');\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        const req = PRELOAD[key];\n        if (!isUndefined(req)) {\n            const promise = boundMutate(req);\n            use(promise);\n        }\n        if (isUndefined(error)) {\n            const promise = revalidate(WITH_DEDUPE);\n            if (!isUndefined(returnedData)) {\n                promise.status = 'fulfilled';\n                promise.value = true;\n            }\n            use(promise);\n        } else {\n            throw error;\n        }\n    }\n    return {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n};\nOBJECT.defineProperty(SWRConfig, 'defaultValue', {\n    value: defaultConfig\n});\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ const useSWR = withArgs(useSWRHandler);\n\nconst immutable = (useSWRNext)=>(key, fetcher, config)=>{\n        // Always override all revalidate options.\n        config.revalidateOnFocus = false;\n        config.revalidateIfStale = false;\n        config.revalidateOnReconnect = false;\n        return useSWRNext(key, fetcher, config);\n    };\nconst useSWRImmutable = withMiddleware(useSWR, immutable);\n\nexport { useSWRImmutable as default, immutable };\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPaginationArrowLeft(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 7,\n    height: 10,\n    viewBox: \"0 0 7 10\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.625 4.14844L6.01562 0.109375L6.8125 0.96875L2.50781 4.82031L6.8125 8.67188L6.01562 9.53125L0.898438 4.82031L1.625 4.14844Z\",\n    fill: \"#A5A5A5\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPaginationArrowLeft);\nexport default __webpack_public_path__ + \"static/media/pagination-arrow-left.df03b068cc2d9c293788f72e40958200.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPaginationArrowRight(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 7,\n    height: 10,\n    viewBox: \"0 0 7 10\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.32031 9.53125L0.523438 8.67188L4.82812 4.82031L0.523438 0.96875L1.32031 0.109375L6.4375 4.82031L1.32031 9.53125Z\",\n    fill: \"#A5A5A5\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPaginationArrowRight);\nexport default __webpack_public_path__ + \"static/media/pagination-arrow-right.09326ff90cb67244b048fb55c1d2b033.svg\";\nexport { ForwardRef as ReactComponent };","import arrowLeft from \"../../../assets/icons/pagination-arrow-left.svg\";\nimport arrowRight from \"../../../assets/icons/pagination-arrow-right.svg\";\n import usePagination from \"../../../hooks/usePagination\";\nexport default function Pagination({ pagesCount, scrollOffset, scrollElem }) {\n  const { pages, activePage, handlePagination } = usePagination(\n    pagesCount,\n    scrollOffset,\n    scrollElem\n  );\n  \n  return (\n    <div className=\"pagination\">\n      <div className=\"row gap-30 center-y end-x\">\n        <div className=\"prev\" onClick={() => handlePagination(activePage - 1)}>\n          <img src={arrowLeft} alt=\"prev\" />\n        </div>\n        <ul className=\"row gap-10 xsmall-text text-main\">\n          {pages.map((el, i) => (\n            <li\n              style={{ pointerEvents: el !== \"...\" ? \"all\" : \"none\" }}\n              className={\n                activePage == el && el !== \"...\" ? \"active\" : \"inactive\"\n              }\n              onClick={() => handlePagination(el)}\n              key={i}\n            >\n              {el}\n            </li>\n          ))}\n        </ul>\n        <div className=\"next\" onClick={() => handlePagination(activePage + 1)}>\n          <img src={arrowRight} alt=\"next\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useContext } from 'react';\nimport {   useSearchParams } from 'react-router-dom';\nimport { MainContext } from '../context/MainContext';\nexport default function usePagination(pagesCount, scrollOffset, scrollElem) {\n    const [pages, setPages] = useState(pagesCount > 5 ? [1, 2, 3, 4, 5, '...', pagesCount] :\n        Array(pagesCount).fill(null).map((_, i) => i + 1));\n    const [searchParams, setSearchParams] = useSearchParams()\n    const activePage = parseInt(searchParams.get('page') ?? 1)\n\n    const { scrollbarAccess } = useContext(MainContext)\n   \n   \n    const handlePagination = (page) => {\n        if (page > pagesCount || page <= 0 || page === '...') return;\n    \n        if (scrollbarAccess.current) {\n           \n            scrollbarAccess.current.scrollTo(0, scrollOffset, 1000);  \n\n        } \n        else {\n            const el = document.querySelector(scrollElem)\n\n            el.scrollIntoView({ behavior: 'smooth' })\n        }\n       \n        setTimeout(() => {\n            if (pagesCount > 5) {\n                if (page >= 5 && page + 2 < pagesCount) {\n                    setPages([1, '...', page - 1, page, page + 1, '...', pagesCount]);\n                } else if (page + 2 >= pagesCount) {\n                    setPages([1, '...', pagesCount - 4, pagesCount - 3, pagesCount - 2, pagesCount - 1, pagesCount]);\n                } else {\n                    setPages([1, 2, 3, 4, 5, '...', pagesCount]);\n                }\n            }\n           \n \n \n            searchParams.set('page', page);\n            setSearchParams(searchParams);\n        }, 500);\n\n    };\n\n    return { pages, activePage, handlePagination };\n}\n","import { useSearchParams } from \"react-router-dom\";\n\nexport const colorMap = {\n    \"серый\": \"palette-gray-light\",\n    \"черный\": \"black\",\n    \"коричневый\": \"palette-brown\",\n    \"белый\": \"white\",\n    \"бежевый\": \"palette-beige\",\n    \"зеленый\": \"palette-green\",\n    \"темно-серый\": \"palette-gray\",\n    \"светло-коричневый\": \"palette-brown-light\",\n  };\n\nexport default function useFilter(filterParam) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const allFilterParams = searchParams.getAll(filterParam) ?? [];\n\n  const rangeParams = [\"minprice\", \"maxprice\", \"minwidth\", \"maxwidth\", \"mindepth\", \"maxdepth\"];\n\n  function resetFilter(filterValue) {\n    searchParams.delete(filterValue);\n    setSearchParams(searchParams);\n  }\n\n  function handleSearchParams(filterValue) {\n    const newSearchParams = new URLSearchParams(searchParams);\n\n    if (rangeParams.includes(filterParam)) {\n      newSearchParams.set(filterParam, filterValue);\n      setSearchParams(newSearchParams);\n      return;\n    }\n\n    const values = newSearchParams.getAll(filterParam);\n\n    if (values.includes(filterValue)) {\n      const newValues = values.filter((value) => value !== filterValue);\n      newSearchParams.delete(filterParam);\n      newValues.forEach((value) => newSearchParams.append(filterParam, value));\n    } else {\n      newSearchParams.append(filterParam, filterValue);\n    }\n    setSearchParams(newSearchParams);\n  }\n\n  function handleFilter(mutate) {\n    const filters = {};\n    const descriptions = [];\n    const selectedColors = [];\n\n    let minPrice = null, maxPrice = null;\n    let minWidth = null, maxWidth = null;\n    let minDepth = null, maxDepth = null;\n\n    for (const [key, value] of searchParams.entries()) {\n      if (key !== \"page\") {\n        if (key === \"minprice\") minPrice = parseFloat(value) || 0;\n        else if (key === \"maxprice\") maxPrice = parseFloat(value) || 250000;\n        else if (key === \"minwidth\") minWidth = parseFloat(value) || 0;\n        else if (key === \"maxwidth\") maxWidth = parseFloat(value) || 10000;\n        else if (key === \"mindepth\") minDepth = parseFloat(value) || 0;\n        else if (key === \"maxdepth\") maxDepth = parseFloat(value) || 10000;\n        else if (key === \"description\") descriptions.push(value);\n        else if (key === \"colors\") selectedColors.push(colorMap[value]);\n        else filters[key] = filters[key] ? [...filters[key], value] : [value];\n      }\n    }\n\n    mutate((data) => {\n      return data.map((el) => {\n        const matchQuery = Object.entries(filters).every(([key, values]) =>\n          values.includes(el[key])\n        );\n        const matchDescription = descriptions.every(\n          (desc) => el[desc] === true\n        );\n        const matchPrice =\n          (maxPrice ? el.price <= maxPrice : true) &&\n          (minPrice ? el.price >= minPrice : true);\n        const matchWidth =\n          (maxWidth ? el.width <= maxWidth : true) &&\n          (minWidth ? el.width >= minWidth : true);\n        const matchDepth =\n          (maxDepth ? el.depth <= maxDepth : true) &&\n          (minDepth ? el.depth >= minDepth : true);\n        const matchColors =\n          selectedColors.length === 0 ||\n          el.colors.some((color) => selectedColors.includes(color));\n\n        return {\n          ...el,\n          isShown:\n            matchQuery &&\n            matchDescription &&\n            matchPrice &&\n            matchWidth &&\n            matchDepth &&\n            matchColors,\n        };\n      });\n    }, false);\n  }\n\n  return {\n    handleSearchParams,\n    handleFilter,\n    resetFilter,\n    allFilterParams,\n  };\n}\n","import React from 'react'\nimport AnimButton from '../buttons/AnimButton/AnimButton'\nimport { useNavigate } from 'react-router-dom'\nimport SmoothAppearance from '../SmoothAppearance'\nexport default function NoResults({level}) {\n  const navigate = useNavigate()\n  return (\n    <SmoothAppearance key={'no-results'} className=\"no-results center-gr\">\n      <h3 className=\"up-case\">no results found</h3>\n      <AnimButton onClick={() => navigate(level ?? \".\")}>go back</AnimButton>\n    </SmoothAppearance>\n  )\n}\n","import React from 'react'\n\nexport default function ReviewStarIcon(props) {\n \n  return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"24\" viewBox=\"0 0 26 24\" >\n      <path d=\"M14.0093 1.4952C13.5597 0.720353 12.4407 0.72035 11.9911 1.4952L8.82471 6.95206C8.6026 7.33482 8.21871 7.59603 7.78114 7.66212L1.84711 8.55838C0.850445 8.70891 0.500842 9.96729 1.27703 10.6104L5.69764 14.2728C6.10684 14.6118 6.29924 15.1466 6.19984 15.6686L5.04348 21.7412C4.86068 22.7012 5.86843 23.4471 6.73311 22.9918L12.3207 20.0497C12.746 19.8257 13.2543 19.8257 13.6796 20.0497L19.2673 22.9918C20.132 23.4471 21.1397 22.7012 20.9569 21.7412L19.8005 15.6686C19.7011 15.1466 19.8935 14.6118 20.3027 14.2728L24.7233 10.6104C25.4995 9.9673 25.1499 8.70891 24.1533 8.55838L18.2192 7.66212C17.7817 7.59603 17.3978 7.33482 17.1757 6.95206L14.0093 1.4952Z\" fill={props.filled ? 'black' : '#989898'} />\n      </svg>\n  )\n}\n","import React from 'react'\nimport ReviewStarIcon from './ReviewStarIcon'\n\nexport default function ReviewItem({ el }) {\n    return (\n        <div className='review-item text-main'>\n            <span className='small-text text-black'>{el.name}</span>\n            <span className='xxsmall-text text-gray'>верифицирован</span>\n            <div className='row wrap gap-20 s-between center-y'>\n                <div className='reviews-stars row gap-5'>\n                    {Array(5).fill(null).map((star, i) => {\n                        return <ReviewStarIcon key={i} filled={i+1 <= el.review} />\n                    })}\n                </div>\n                <span className='xxsmall-text text-gray'>\n                    {el.date}\n                </span>\n            </div>\n \n            {el.comment.map((el, i) => {\n                return <p className='text-black xsmall-text' key={i}>\n                    {el}\n                </p>\n            })}\n            {\n                el.image && <div className='review-image' style={{background: `url(${el.image})`}}></div>\n            }\n            <span className='xxsmall-text text-black'>\n                {el.product}\n            </span>\n        </div>\n    )\n}\n","import { AnimatePresence } from \"framer-motion\";\nimport SmoothAppearance from \"../../ui/SmoothAppearance\";\nimport NoResults from \"../../ui/messages/NoResults\";\nimport DataLoading from \"../../ui/messages/DataLoading\";\nimport ReviewItem from \"./ReviewItem\";\nimport FetchError from \"../../ui/messages/FetchError\";\nexport default function NewsDisplay({ data, isLoading, searchParams, error }) {\n    const noResults = data && data.every((el) => el.isShown === false);\n \n    return (\n        <AnimatePresence mode=\"wait\">\n            {error ? (\n                <FetchError message={error.message} />\n            ) : !isLoading && data ? (\n                !noResults ? (\n                    <SmoothAppearance key={searchParams} className=\"section-layout\">\n                        {data.map((el, i) => {\n                            return <ReviewItem key={i} el={el} />;\n                        })}\n                    </SmoothAppearance>\n                ) : (\n                    <NoResults />\n                )\n\n            ) : (\n                <DataLoading />\n            )}\n        </AnimatePresence>\n    );\n}\n","import React, { useMemo } from 'react'\nimport ReviewStarIcon from './ReviewStarIcon'\n\nexport default function ReviewsHeader({ reviewsCount }) {\n    const totalRate = useMemo(() => (reviewsCount.reduce((prev, cur) => { return prev + cur }, 0) / reviewsCount.length).toFixed(1), [])\n\n\n    const allRates = useMemo(() => {\n        \n        let ratesMap = {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n        }\n        reviewsCount.forEach(review => ratesMap[review]++)\n        return ratesMap\n    }, [])\n\n \n    return (\n        <div className='reviews-header row wrap center-y s-between gap-20'>\n            <div>\n                <div className='row gap-15 center-y'>\n                   <div className='total-rate text-main text-black'>\n                        {totalRate}\n                   </div>\n                    <div className='reviews-stars'>\n                        <div className='row gap-5'>\n                            {Array(5).fill(null).map((star, i) => {\n                                return <ReviewStarIcon key={i} filled={false} />\n                            })}\n                        </div>\n                        <div className='reviews-stars-mask row gap-5' style={{ clipPath: `inset(0 ${100 - (totalRate / 5) * 100}% 0 0)` }}\n                        >\n                            {Array(5).fill(null).map((star, i) => {\n                                return <ReviewStarIcon key={i} filled={true} />\n                            })}\n                        </div>\n                    </div>\n                </div>\n                <span className='xxsmall-text text-main'>\n                    На основе {reviewsCount.length} отзывов\n                </span>\n            </div>\n            <div className='row wrap gap-10'>\n                {Object.values(allRates).reverse().map((el, i) => {\n                    return <div className='review-output row gap-5 center-y text-main text-gray xsmall-text' key={i}>\n                        {Math.abs(5-i)} <ReviewStarIcon filled={false} /> {`(${el})`}\n                    </div>\n                })}\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport './reviews.css'\nimport useSWRImmutable from 'swr/immutable';\nimport { Link } from 'react-router-dom'\nimport { useSearchParams } from 'react-router-dom';\nimport { getReviewsCount } from '../../../db/loadData';\nimport FetchError from '../../ui/messages/FetchError';\nimport Pagination from '../../ui/Pagination/Pagination';\nimport useFilter from '../../../hooks/useFilter';\nimport ReviewsDisplay from './ReviewsDisplay';\nimport ReviewsHeader from './ReviewsHeader';\nexport default function Reviews() {\n\n    const [searchParams] = useSearchParams();\n\n    const page = parseInt(searchParams.get(\"page\") ?? 1);\n\n    const { data, error, isLoading, mutate } = useSWRImmutable([\n        \"reviews\",\n        page,\n        12,\n    ]);\n\n    const { data: reviewsCount } = useSWRImmutable([\"reviews-count\"], getReviewsCount);\n    const { handleFilter } = useFilter();\n\n    useEffect(() => {\n        if (!data) return;\n        handleFilter(mutate);\n    }, [searchParams, isLoading]);\n\n\n    return (\n        <section id='reviews'>\n            <div className=\"container\" >\n                <div className='row gap-10 xxxsmall-text text-main text-black up-case'>\n                    <Link className='text-gray' to={'/'}>\n                        Главная\n                    </Link>\n                    <span>/</span>\n                    <span>отзывы</span>\n                </div>\n                {reviewsCount && <ReviewsHeader reviewsCount={reviewsCount} />}\n                <ReviewsDisplay\n                    error={error}\n                    isLoading={isLoading}\n                    searchParams={searchParams}\n                    data={data}\n                />\n                {reviewsCount && (\n                    <Pagination\n                        scrollOffset={350}\n                        pagesCount={Math.ceil((reviewsCount.length - 1) / 12)}\n                        scrollElem={'#reviews'}\n                    />\n                )}\n            </div>\n        </section>\n    )\n}\n","import bg from \"../../assets/img_21.webp\";\nimport Intro from \"../../components/sections/Intro/Intro\";\nimport Reviews from \"../../components/sections/Reviews/Reviews\";\nfunction ReviewsSections() {\n  return (\n    <>\n      <Intro\n        bg={bg}\n        id=\"reviews-intro\"\n        posY={\"70%\"}\n   \n          headline=\"отзывы\"\n          description=\"Мнение наших клиентов очень важно для нас\"\n  \n      />\n   <Reviews/>\n    </>\n  );\n}\nexport default ReviewsSections;\n"],"names":["Intro","_ref","id","bg","posY","description","headline","_jsxs","className","style","background","children","_jsx","dangerouslySetInnerHTML","__html","use","ReactExports","promise","status","value","reason","then","v","e","WITH_DEDUPE","dedupe","OBJECT","defineProperty","SWRConfig","defaultConfig","useSWR","withArgs","useSWRHandler","_key","fetcher","config","cache","compare","suspense","fallbackData","revalidateOnMount","revalidateIfStale","refreshInterval","refreshWhenHidden","refreshWhenOffline","keepPreviousData","EVENT_REVALIDATORS","MUTATION","FETCH","PRELOAD","SWRGlobalState","get","key","fnArg","serialize","initialMountedRef","useRef","unmountedRef","keyRef","fetcherRef","configRef","getConfig","current","isActive","isVisible","isOnline","getCache","setCache","subscribeCache","getInitialCache","createCacheHelper","stateDependencies","fallback","isUndefined","isEqual","prev","_","t","returnedData","getSnapshot","useMemo","shouldStartRequest","isPaused","getSelectedCache","state","snapshot","mergeObjects","_k","isValidating","isLoading","cachedData","initialData","clientSnapshot","serverSnapshot","memorizedSnapshot","newSnapshot","data","error","cached","useSyncExternalStore","useCallback","callback","isInitialMount","hasRevalidator","length","laggyDataRef","shouldDoInitialRevalidation","defaultValidatingState","revalidate","async","currentFetcher","newData","startAt","loading","opts","revalidateOpts","shouldStartNewRequest","callbackSafeguard","IS_REACT_LEGACY","finalState","finishRequestAndUpdateState","cleanupState","requestInfo","initialState","loadingTimeout","setTimeout","onLoadingSlow","getTimestamp","dedupingInterval","onDiscarded","UNDEFINED","mutationInfo","cacheData","onSuccess","err","currentConfig","shouldRetryOnError","onError","isFunction","revalidateOnFocus","revalidateOnReconnect","onErrorRetry","_opts","revalidators","revalidateEvents","ERROR_REVALIDATE_EVENT","retryCount","boundMutate","_len","arguments","args","Array","_key2","internalMutate","useIsomorphicLayoutEffect","softRevalidate","bind","nextFocusRevalidatedAt","unsubEvents","subscribeCallback","type","undefined","FOCUS_EVENT","now","Date","focusThrottleInterval","RECONNECT_EVENT","MUTATE_EVENT","IS_SERVER","rAF","timer","next","interval","execute","clearTimeout","useDebugValue","Error","req","mutate","useSWRImmutable","withMiddleware","useSWRNext","Pagination","pagesCount","scrollOffset","scrollElem","pages","activePage","handlePagination","_searchParams$get","setPages","useState","fill","map","i","searchParams","setSearchParams","useSearchParams","parseInt","scrollbarAccess","useContext","MainContext","page","scrollTo","document","querySelector","scrollIntoView","behavior","set","usePagination","onClick","src","arrowLeft","alt","el","pointerEvents","arrowRight","colorMap","NoResults","level","navigate","useNavigate","SmoothAppearance","AnimButton","ReviewStarIcon","props","xmlns","width","height","viewBox","d","filled","ReviewItem","name","star","review","date","comment","image","product","NewsDisplay","noResults","every","isShown","AnimatePresence","mode","FetchError","message","DataLoading","ReviewsHeader","reviewsCount","totalRate","reduce","cur","toFixed","allRates","ratesMap","forEach","clipPath","Object","values","reverse","Math","abs","Reviews","getReviewsCount","handleFilter","filterParam","_searchParams$getAll","allFilterParams","getAll","rangeParams","handleSearchParams","filterValue","newSearchParams","URLSearchParams","includes","newValues","filter","delete","append","filters","descriptions","selectedColors","minPrice","maxPrice","minWidth","maxWidth","minDepth","maxDepth","entries","parseFloat","push","matchQuery","matchDescription","desc","matchPrice","price","matchWidth","matchDepth","depth","matchColors","colors","some","color","resetFilter","useFilter","useEffect","Link","to","ReviewsDisplay","ceil","_Fragment"],"sourceRoot":""}